/**
 * Nh√≥m kh√°ch ‚Üí M√†u (hex)
 */
const GROUP_COLORS = {
  "üî¥ Ban t·ªï ch·ª©c / Organizer":    "#ff0000",
  "üü° Keynote / Keynote Speaker":  "#ffd700",
  "üü† B√°o c√°o vi√™n / Presenter":   "#ffa500",
  "üîµ Kh√°ch tham d·ª± / Participant":"#1e90ff"
};

const SHEET_ID   = "1itkIj1DO5VFk8R6lQPeCDFl1VFf1rCGmb7AyJLmcEfk"; // Google Sheet c·ªßa b·∫°n
const SHEET_NAME = "Checkin";
const TZ         = "Asia/Ho_Chi_Minh";

// B·∫≠t email th√¥ng b√°o (n·∫øu b·∫°n ƒë√£ d√πng tr∆∞·ªõc ƒë√≥)
const ENABLE_EMAIL = true;
const EMAIL_SUBJECT_PREFIX = "[Check-in] ";
const EMAIL_SENDER_NAME = "Event Team";
const EMAIL_REPLY_TO = "";

// C·∫•u tr√∫c c·ªôt (1-based)
const COL = {
  ID: 1,            // A
  FULLNAME: 2,      // B
  JOB: 3,           // C
  ORG: 4,           // D
  GROUP: 5,         // E
  GROUP_COLOR: 6,   // F (t√¥ n·ªÅn)
  EMAIL: 7,         // G
  PHONE: 8,         // H
  TIME: 9           // I
};

// Quy t·∫Øc ID t·ª± tƒÉng
const ID_PREFIX = "G";
const ID_PAD = 3;  // G001

/** L·∫•y sheet + header chu·∫©n */
function getDataSheet_() {
  const ss = SpreadsheetApp.openById(SHEET_ID);
  let sheet = ss.getSheetByName(SHEET_NAME);
  if (!sheet) sheet = ss.insertSheet(SHEET_NAME);
  if (sheet.getLastRow() === 0) {
    sheet.getRange(1, 1, 1, 9).setValues([[
      "ID",
      "H·ªç v√† t√™n",
      "C√¥ng vi·ªác",
      "ƒê∆°n v·ªã c√¥ng t√°c",
      "Nh√≥m kh√°ch",
      "M√†u nh√≥m kh√°ch",
      "Email",
      "S·ªë ƒëi·ªán tho·∫°i",
      "Th·ªùi gian check-in"
    ]]);
  }
  return sheet;
}

/** Giao di·ªán Web App */
function doGet() {
  const tpl = HtmlService.createTemplateFromFile('Index');
  tpl.groupColors = GROUP_COLORS;
  return tpl.evaluate()
    .setTitle('Check-in')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)
    .setSandboxMode(HtmlService.SandboxMode.IFRAME);
}

/**
 * Check-in (nh·∫≠p tay)
 * payload: { fullName, job?, org, group, email, phone? }
 * - Validate c∆° b·∫£n (job/phone l√† t√πy ch·ªçn)
 * - Ch·ªëng duplicate theo Email ho·∫∑c Phone (n·∫øu c√≥ phone)
 * - T·∫°o ID t·ª± tƒÉng
 * - Ghi d√≤ng + t√¥ m√†u c·ªôt GROUP_COLOR
 * - Phone l∆∞u d·∫°ng chu·ªói ƒë·ªÉ gi·ªØ s·ªë 0 ƒë·∫ßu (n·∫øu c√≥)
 * - G·ª≠i email x√°c nh·∫≠n (n·∫øu ENABLE_EMAIL = true)
 */
function checkIn(payload) {
  try {
    const sheet = getDataSheet_();
    const { fullName, job, org, group, email, phone } = normalizePayloadManual_(payload);

    // ======== Backend validation (job/phone: t√πy ch·ªçn) ========
    if (!fullName) throw new Error('Vui l√≤ng nh·∫≠p "H·ªç v√† t√™n".');
    if (!org)      throw new Error('Vui l√≤ng nh·∫≠p "ƒê∆°n v·ªã c√¥ng t√°c".');
    if (!group)    throw new Error('Vui l√≤ng ch·ªçn "Nh√≥m kh√°ch".');
    if (!email)    throw new Error('Vui l√≤ng nh·∫≠p "Email".');
    if (!isValidEmail_(email)) throw new Error('Email kh√¥ng h·ª£p l·ªá.');

    // Phone ch·ªâ chu·∫©n ho√° khi c√≥ nh·∫≠p
    let normalizedPhone = "";
    if (phone) normalizedPhone = normalizePhone_(phone); // throws n·∫øu sai
    // =========================================================

    const lock = LockService.getDocumentLock();
    lock.waitLock(5000);

    // Duplicate theo email ho·∫∑c (phone n·∫øu c√≥)
    const dup = findDuplicateByEmailOrPhone_(sheet, email, normalizedPhone);
    if (dup) {
      const prevId   = sheet.getRange(dup.row, COL.ID).getDisplayValue();
      const prevTime = sheet.getRange(dup.row, COL.TIME).getDisplayValue();
      lock.releaseLock();
      throw new Error(`Email/Phone ƒë√£ check-in tr∆∞·ªõc ƒë√≥ (ID ${prevId}${prevTime ? ", " + prevTime : ""}). Kh√¥ng th·ªÉ check-in tr√πng.`);
    }

    const id    = getNextId_(sheet);
    const color = GROUP_COLORS[group] || "#dddddd";
    const now   = Utilities.formatDate(new Date(), TZ, "yyyy-MM-dd HH:mm:ss");

    const phoneStr = normalizedPhone ? "'" + normalizedPhone : "";

    sheet.appendRow([
      id,
      fullName,
      job || "",
      org,
      group,
      "",
      email,
      phoneStr,
      now
    ]);

    // T√¥ m√†u c·ªôt "M√†u nh√≥m kh√°ch"
    const row = sheet.getLastRow();
    sheet.getRange(row, COL.GROUP_COLOR).setBackground(color);

    // Email x√°c nh·∫≠n (tu·ª≥ ch·ªçn)
    if (ENABLE_EMAIL) {
      try {
        sendConfirmationEmail_(email, {
          id, fullName, job, org, group,
          phone: normalizedPhone, time: now
        });
      } catch (mailErr) {
        lock.releaseLock();
        return makeResult_(true,
          `Check-in th√†nh c√¥ng: ${fullName} (${shortGroupName_(group)}) ‚Äî *L∆∞u √Ω:* g·ª≠i email th·∫•t b·∫°i: ${mailErr.message || mailErr}`,
          group, now, id);
      }
    }

    lock.releaseLock();

    // Th√¥ng ƒëi·ªáp + m√†u theo Nh√≥m kh√°ch
    return makeResult_(true, `Check-in th√†nh c√¥ng: ${fullName} (${shortGroupName_(group)})`, group, now, id);

  } catch (err) {
    return makeResult_(false, err.message || String(err));
  }
}

/** T√™n nh√≥m g·ªçn: l·∫•y ph·∫ßn Vi·ªát tr∆∞·ªõc d·∫•u '/' v√† b·ªè emoji ƒë·∫ßu d√≤ng */
function shortGroupName_(group) {
  if (!group) return "";
  let s = String(group).split('/')[0]; // tr∆∞·ªõc d·∫•u '/'
  s = s.replace(/^[^\w√Ä-·ªπ]+/u, '').trim(); // b·ªè emoji/k√Ω t·ª± ƒë·∫ßu
  return s;
}

/** G·ª≠i email x√°c nh·∫≠n check-in (n·∫øu b·∫≠t) */
function sendConfirmationEmail_(to, info) {
  const subject = `${EMAIL_SUBJECT_PREFIX}${info.fullName} (ID ${info.id})`;
  const clr = GROUP_COLORS[info.group] || "#148a39";
  const html = `
    <div style="font-family:system-ui,Segoe UI,Arial;line-height:1.55;color:#111">
      <div style="background:${clr};color:#fff;border-radius:10px;padding:14px 16px;font-weight:700">
        Check-in th√†nh c√¥ng: ${_esc(info.fullName)} (${_esc(shortGroupName_(info.group))})
      </div>
      <div style="padding:12px 6px 0">
        <p>Th√¥ng tin c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.</p>
        <ul>
          <li><b>ID:</b> ${_esc(info.id)}</li>
          <li><b>C√¥ng vi·ªác:</b> ${_esc(info.job || '')}</li>
          <li><b>ƒê∆°n v·ªã:</b> ${_esc(info.org)}</li>
          <li><b>Nh√≥m:</b> ${_esc(info.group)}</li>
          ${info.phone ? `<li><b>ƒêi·ªán tho·∫°i:</b> ${_esc(info.phone)}</li>` : ``}
          <li><b>Th·ªùi gian:</b> ${_esc(info.time)}</li>
        </ul>
      </div>
    </div>`;
  const opt = { to, subject, htmlBody: html, name: EMAIL_SENDER_NAME || undefined };
  if (EMAIL_REPLY_TO) opt.replyTo = EMAIL_REPLY_TO;
  MailApp.sendEmail(opt);
}

/** T√¨m d√≤ng tr√πng theo Email ho·∫∑c Phone (phone ch·ªâ check n·∫øu c√≥) */
function findDuplicateByEmailOrPhone_(sheet, email, phoneNormalized) {
  const lastRow = sheet.getLastRow();
  if (lastRow < 2) return null;

  const emailVals = sheet.getRange(2, COL.EMAIL, lastRow - 1, 1).getValues();
  const phoneVals = sheet.getRange(2, COL.PHONE, lastRow - 1, 1).getValues();

  const emailLower = String(email || "").trim().toLowerCase();

  for (let i = 0; i < emailVals.length; i++) {
    const rowEmail = String(emailVals[i][0] || "").trim().toLowerCase();
    const rowPhone = safeNormalizePhone_(String(phoneVals[i][0] || ""));

    if (rowEmail && emailLower && rowEmail === emailLower) return { row: i + 2 };
    if (phoneNormalized && rowPhone && rowPhone === phoneNormalized) return { row: i + 2 };
  }
  return null;
}

/** Sinh ID ti·∫øp theo theo quy t·∫Øc G001, G002, ... */
function getNextId_(sheet) {
  const lastRow = sheet.getLastRow();
  if (lastRow < 2) return ID_PREFIX + String(1).padStart(ID_PAD, "0");

  const ids = sheet.getRange(2, COL.ID, lastRow - 1, 1).getValues().flat();
  let maxNum = 0;
  for (const v of ids) {
    const s = String(v || "");
    const m = s.match(new RegExp("^" + ID_PREFIX + "(\\d+)$"));
    if (m) {
      const n = parseInt(m[1], 10);
      if (!isNaN(n) && n > maxNum) maxNum = n;
    }
  }
  const next = maxNum + 1;
  return ID_PREFIX + String(next).padStart(ID_PAD, "0");
}

/** Chu·∫©n h√≥a payload nh·∫≠p tay */
function normalizePayloadManual_(payload) {
  payload = payload || {};
  const fullName = (payload.fullName || "").trim();
  const job      = (payload.job || "").trim();        // t√πy ch·ªçn
  const org      = (payload.org || "").trim();
  const group    = (payload.group || "").trim();
  const email    = (payload.email || "").trim();
  const phone    = (payload.phone || "").trim();      // t√πy ch·ªçn
  return { fullName, job, org, group, email, phone };
}

/** Email regex ƒë∆°n gi·∫£n */
function isValidEmail_(email) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

/** Chu·∫©n ho√° s·ªë ƒëi·ªán tho·∫°i (d√πng khi ng∆∞·ªùi d√πng c√≥ nh·∫≠p) */
function normalizePhone_(raw) {
  const digits = String(raw || "").replace(/\D/g, "");
  if (!digits) throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá.');
  let normalized = digits;
  if (normalized.startsWith("84")) normalized = "0" + normalized.slice(2);
  if (!normalized.startsWith("0")) normalized = "0" + normalized;
  if (normalized.length < 9 || normalized.length > 11) {
    throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (9‚Äì11 ch·ªØ s·ªë).');
  }
  if (!/^\d+$/.test(normalized)) throw new Error('S·ªë ƒëi·ªán tho·∫°i ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ s·ªë.');
  return normalized;
}

/** Chu·∫©n ho√° s·ªë ƒëi·ªán tho·∫°i t·ª´ Sheet (kh√¥ng n√©m l·ªói) */
function safeNormalizePhone_(raw) {
  const digits = String(raw || "").replace(/\D/g, "");
  if (!digits) return "";
  let n = digits;
  if (n.startsWith("84")) n = "0" + n.slice(2);
  if (!n.startsWith("0")) n = "0" + n;
  return n;
}

/** K·∫øt qu·∫£ tr·∫£ v·ªÅ frontend (color = m√†u nh√≥m) */
function makeResult_(ok, message, group, time, id) {
  const color = GROUP_COLORS[group] || "#dddddd";
  return { ok, message, group: group || "", color, time: time || null, id: id || null };
}

function _esc(s) {
  return String(s == null ? "" : s).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
}

/** Include (n·∫øu c·∫ßn) */
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}
